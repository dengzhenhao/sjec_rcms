package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityCompanyWorker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_COMPANY_WORKER.
*/
public class EntityCompanyWorkerDao extends AbstractDao<EntityCompanyWorker, Void> {

    public static final String TABLENAME = "ENTITY_COMPANY_WORKER";

    /**
     * Properties of entity EntityCompanyWorker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property StaffNo = new Property(1, String.class, "StaffNo", false, "STAFF_NO");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Telephone = new Property(3, String.class, "Telephone", false, "TELEPHONE");
    };


    public EntityCompanyWorkerDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCompanyWorkerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_COMPANY_WORKER' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'STAFF_NO' TEXT," + // 1: StaffNo
                "'NAME' TEXT," + // 2: Name
                "'TELEPHONE' TEXT);"); // 3: Telephone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_COMPANY_WORKER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCompanyWorker entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String StaffNo = entity.getStaffNo();
        if (StaffNo != null) {
            stmt.bindString(2, StaffNo);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Telephone = entity.getTelephone();
        if (Telephone != null) {
            stmt.bindString(4, Telephone);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCompanyWorker readEntity(Cursor cursor, int offset) {
        EntityCompanyWorker entity = new EntityCompanyWorker( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // StaffNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // Telephone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCompanyWorker entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStaffNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTelephone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCompanyWorker entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCompanyWorker entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
