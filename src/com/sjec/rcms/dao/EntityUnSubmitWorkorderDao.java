package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityUnSubmitWorkorder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_UN_SUBMIT_WORKORDER.
*/
public class EntityUnSubmitWorkorderDao extends AbstractDao<EntityUnSubmitWorkorder, String> {

    public static final String TABLENAME = "ENTITY_UN_SUBMIT_WORKORDER";

    /**
     * Properties of entity EntityUnSubmitWorkorder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", true, "INNER_ID");
        public final static Property Type = new Property(1, Integer.class, "Type", false, "TYPE");
        public final static Property Status = new Property(2, String.class, "Status", false, "STATUS");
        public final static Property Latitude = new Property(3, String.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(4, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Remark = new Property(5, String.class, "Remark", false, "REMARK");
        public final static Property ResultType = new Property(6, String.class, "ResultType", false, "RESULT_TYPE");
        public final static Property IsNeedAbarbeitung = new Property(7, String.class, "IsNeedAbarbeitung", false, "IS_NEED_ABARBEITUNG");
        public final static Property UserID = new Property(8, String.class, "UserID", false, "USER_ID");
    };


    public EntityUnSubmitWorkorderDao(DaoConfig config) {
        super(config);
    }
    
    public EntityUnSubmitWorkorderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_UN_SUBMIT_WORKORDER' (" + //
                "'INNER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: InnerID
                "'TYPE' INTEGER," + // 1: Type
                "'STATUS' TEXT," + // 2: Status
                "'LATITUDE' TEXT," + // 3: Latitude
                "'LONGITUDE' TEXT," + // 4: Longitude
                "'REMARK' TEXT," + // 5: Remark
                "'RESULT_TYPE' TEXT," + // 6: ResultType
                "'IS_NEED_ABARBEITUNG' TEXT," + // 7: IsNeedAbarbeitung
                "'USER_ID' TEXT);"); // 8: UserID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_UN_SUBMIT_WORKORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityUnSubmitWorkorder entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(2, Type);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(3, Status);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(4, Latitude);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(5, Longitude);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(6, Remark);
        }
 
        String ResultType = entity.getResultType();
        if (ResultType != null) {
            stmt.bindString(7, ResultType);
        }
 
        String IsNeedAbarbeitung = entity.getIsNeedAbarbeitung();
        if (IsNeedAbarbeitung != null) {
            stmt.bindString(8, IsNeedAbarbeitung);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(9, UserID);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EntityUnSubmitWorkorder readEntity(Cursor cursor, int offset) {
        EntityUnSubmitWorkorder entity = new EntityUnSubmitWorkorder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // Type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Latitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Longitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ResultType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // IsNeedAbarbeitung
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // UserID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityUnSubmitWorkorder entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResultType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsNeedAbarbeitung(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(EntityUnSubmitWorkorder entity, long rowId) {
        return entity.getInnerID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(EntityUnSubmitWorkorder entity) {
        if(entity != null) {
            return entity.getInnerID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
