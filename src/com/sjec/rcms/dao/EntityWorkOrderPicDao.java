package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityWorkOrderPic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_WORK_ORDER_PIC.
*/
public class EntityWorkOrderPicDao extends AbstractDao<EntityWorkOrderPic, Void> {

    public static final String TABLENAME = "ENTITY_WORK_ORDER_PIC";

    /**
     * Properties of entity EntityWorkOrderPic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, Integer.class, "InnerID", false, "INNER_ID");
        public final static Property WorkorderID = new Property(1, String.class, "WorkorderID", false, "WORKORDER_ID");
        public final static Property PicPath = new Property(2, String.class, "PicPath", false, "PIC_PATH");
        public final static Property Add_UserID = new Property(3, String.class, "Add_UserID", false, "ADD__USER_ID");
        public final static Property Add_Time = new Property(4, Integer.class, "Add_Time", false, "ADD__TIME");
        public final static Property Add_IP = new Property(5, Integer.class, "Add_IP", false, "ADD__IP");
    };


    public EntityWorkOrderPicDao(DaoConfig config) {
        super(config);
    }
    
    public EntityWorkOrderPicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_WORK_ORDER_PIC' (" + //
                "'INNER_ID' INTEGER," + // 0: InnerID
                "'WORKORDER_ID' TEXT," + // 1: WorkorderID
                "'PIC_PATH' TEXT," + // 2: PicPath
                "'ADD__USER_ID' TEXT," + // 3: Add_UserID
                "'ADD__TIME' INTEGER," + // 4: Add_Time
                "'ADD__IP' INTEGER);"); // 5: Add_IP
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_WORK_ORDER_PIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityWorkOrderPic entity) {
        stmt.clearBindings();
 
        Integer InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindLong(1, InnerID);
        }
 
        String WorkorderID = entity.getWorkorderID();
        if (WorkorderID != null) {
            stmt.bindString(2, WorkorderID);
        }
 
        String PicPath = entity.getPicPath();
        if (PicPath != null) {
            stmt.bindString(3, PicPath);
        }
 
        String Add_UserID = entity.getAdd_UserID();
        if (Add_UserID != null) {
            stmt.bindString(4, Add_UserID);
        }
 
        Integer Add_Time = entity.getAdd_Time();
        if (Add_Time != null) {
            stmt.bindLong(5, Add_Time);
        }
 
        Integer Add_IP = entity.getAdd_IP();
        if (Add_IP != null) {
            stmt.bindLong(6, Add_IP);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityWorkOrderPic readEntity(Cursor cursor, int offset) {
        EntityWorkOrderPic entity = new EntityWorkOrderPic( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // WorkorderID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PicPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Add_UserID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Add_Time
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // Add_IP
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityWorkOrderPic entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setWorkorderID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPicPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdd_UserID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdd_Time(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAdd_IP(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityWorkOrderPic entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityWorkOrderPic entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
