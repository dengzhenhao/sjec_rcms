package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityVillage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_VILLAGE.
*/
public class EntityVillageDao extends AbstractDao<EntityVillage, Void> {

    public static final String TABLENAME = "ENTITY_VILLAGE";

    /**
     * Properties of entity EntityVillage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property Village_ProID = new Property(1, String.class, "Village_ProID", false, "VILLAGE__PRO_ID");
        public final static Property Village_ProName = new Property(2, String.class, "Village_ProName", false, "VILLAGE__PRO_NAME");
        public final static Property Village_CityID = new Property(3, String.class, "Village_CityID", false, "VILLAGE__CITY_ID");
        public final static Property Village_CityName = new Property(4, String.class, "Village_CityName", false, "VILLAGE__CITY_NAME");
        public final static Property Village_Name = new Property(5, String.class, "Village_Name", false, "VILLAGE__NAME");
        public final static Property Address = new Property(6, String.class, "Address", false, "ADDRESS");
        public final static Property Remark = new Property(7, String.class, "Remark", false, "REMARK");
    };


    public EntityVillageDao(DaoConfig config) {
        super(config);
    }
    
    public EntityVillageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_VILLAGE' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'VILLAGE__PRO_ID' TEXT," + // 1: Village_ProID
                "'VILLAGE__PRO_NAME' TEXT," + // 2: Village_ProName
                "'VILLAGE__CITY_ID' TEXT," + // 3: Village_CityID
                "'VILLAGE__CITY_NAME' TEXT," + // 4: Village_CityName
                "'VILLAGE__NAME' TEXT," + // 5: Village_Name
                "'ADDRESS' TEXT," + // 6: Address
                "'REMARK' TEXT);"); // 7: Remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_VILLAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityVillage entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String Village_ProID = entity.getVillage_ProID();
        if (Village_ProID != null) {
            stmt.bindString(2, Village_ProID);
        }
 
        String Village_ProName = entity.getVillage_ProName();
        if (Village_ProName != null) {
            stmt.bindString(3, Village_ProName);
        }
 
        String Village_CityID = entity.getVillage_CityID();
        if (Village_CityID != null) {
            stmt.bindString(4, Village_CityID);
        }
 
        String Village_CityName = entity.getVillage_CityName();
        if (Village_CityName != null) {
            stmt.bindString(5, Village_CityName);
        }
 
        String Village_Name = entity.getVillage_Name();
        if (Village_Name != null) {
            stmt.bindString(6, Village_Name);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(7, Address);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(8, Remark);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityVillage readEntity(Cursor cursor, int offset) {
        EntityVillage entity = new EntityVillage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Village_ProID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Village_ProName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Village_CityID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Village_CityName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Village_Name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // Remark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityVillage entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVillage_ProID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVillage_ProName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVillage_CityID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVillage_CityName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVillage_Name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityVillage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityVillage entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
