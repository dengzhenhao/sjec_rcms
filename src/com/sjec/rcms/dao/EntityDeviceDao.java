package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityDevice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_DEVICE.
*/
public class EntityDeviceDao extends AbstractDao<EntityDevice, Void> {

    public static final String TABLENAME = "ENTITY_DEVICE";

    /**
     * Properties of entity EntityDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property Lift_Address = new Property(1, String.class, "Lift_Address", false, "LIFT__ADDRESS");
        public final static Property Lift_Type = new Property(2, String.class, "Lift_Type", false, "LIFT__TYPE");
        public final static Property Lift_Style = new Property(3, String.class, "Lift_Style", false, "LIFT__STYLE");
        public final static Property Company_Name = new Property(4, String.class, "Company_Name", false, "COMPANY__NAME");
        public final static Property Company_Address = new Property(5, String.class, "Company_Address", false, "COMPANY__ADDRESS");
        public final static Property Village_Address = new Property(6, String.class, "Village_Address", false, "VILLAGE__ADDRESS");
        public final static Property Village_Name = new Property(7, String.class, "Village_Name", false, "VILLAGE__NAME");
        public final static Property Village_Group_Num = new Property(8, String.class, "Village_Group_Num", false, "VILLAGE__GROUP__NUM");
        public final static Property Village_Stage_Num = new Property(9, String.class, "Village_Stage_Num", false, "VILLAGE__STAGE__NUM");
        public final static Property Device_Num = new Property(10, String.class, "Device_Num", false, "DEVICE__NUM");
        public final static Property Contract_Num = new Property(11, String.class, "Contract_Num", false, "CONTRACT__NUM");
        public final static Property Specification = new Property(12, String.class, "Specification", false, "SPECIFICATION");
        public final static Property Delivery_Date = new Property(13, String.class, "Delivery_Date", false, "DELIVERY__DATE");
        public final static Property Manufacturer = new Property(14, String.class, "Manufacturer", false, "MANUFACTURER");
        public final static Property Program_Name = new Property(15, String.class, "Program_Name", false, "PROGRAM__NAME");
        public final static Property User_Company = new Property(16, String.class, "User_Company", false, "USER__COMPANY");
        public final static Property LoginCode = new Property(17, String.class, "LoginCode", false, "LOGIN_CODE");
        public final static Property Longitude = new Property(18, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(19, String.class, "Latitude", false, "LATITUDE");
        public final static Property LastMaintainTime = new Property(20, String.class, "LastMaintainTime", false, "LAST_MAINTAIN_TIME");
    };


    public EntityDeviceDao(DaoConfig config) {
        super(config);
    }
    
    public EntityDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_DEVICE' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'LIFT__ADDRESS' TEXT," + // 1: Lift_Address
                "'LIFT__TYPE' TEXT," + // 2: Lift_Type
                "'LIFT__STYLE' TEXT," + // 3: Lift_Style
                "'COMPANY__NAME' TEXT," + // 4: Company_Name
                "'COMPANY__ADDRESS' TEXT," + // 5: Company_Address
                "'VILLAGE__ADDRESS' TEXT," + // 6: Village_Address
                "'VILLAGE__NAME' TEXT," + // 7: Village_Name
                "'VILLAGE__GROUP__NUM' TEXT," + // 8: Village_Group_Num
                "'VILLAGE__STAGE__NUM' TEXT," + // 9: Village_Stage_Num
                "'DEVICE__NUM' TEXT," + // 10: Device_Num
                "'CONTRACT__NUM' TEXT," + // 11: Contract_Num
                "'SPECIFICATION' TEXT," + // 12: Specification
                "'DELIVERY__DATE' TEXT," + // 13: Delivery_Date
                "'MANUFACTURER' TEXT," + // 14: Manufacturer
                "'PROGRAM__NAME' TEXT," + // 15: Program_Name
                "'USER__COMPANY' TEXT," + // 16: User_Company
                "'LOGIN_CODE' TEXT," + // 17: LoginCode
                "'LONGITUDE' TEXT," + // 18: Longitude
                "'LATITUDE' TEXT," + // 19: Latitude
                "'LAST_MAINTAIN_TIME' TEXT);"); // 20: LastMaintainTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_DEVICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityDevice entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String Lift_Address = entity.getLift_Address();
        if (Lift_Address != null) {
            stmt.bindString(2, Lift_Address);
        }
 
        String Lift_Type = entity.getLift_Type();
        if (Lift_Type != null) {
            stmt.bindString(3, Lift_Type);
        }
 
        String Lift_Style = entity.getLift_Style();
        if (Lift_Style != null) {
            stmt.bindString(4, Lift_Style);
        }
 
        String Company_Name = entity.getCompany_Name();
        if (Company_Name != null) {
            stmt.bindString(5, Company_Name);
        }
 
        String Company_Address = entity.getCompany_Address();
        if (Company_Address != null) {
            stmt.bindString(6, Company_Address);
        }
 
        String Village_Address = entity.getVillage_Address();
        if (Village_Address != null) {
            stmt.bindString(7, Village_Address);
        }
 
        String Village_Name = entity.getVillage_Name();
        if (Village_Name != null) {
            stmt.bindString(8, Village_Name);
        }
 
        String Village_Group_Num = entity.getVillage_Group_Num();
        if (Village_Group_Num != null) {
            stmt.bindString(9, Village_Group_Num);
        }
 
        String Village_Stage_Num = entity.getVillage_Stage_Num();
        if (Village_Stage_Num != null) {
            stmt.bindString(10, Village_Stage_Num);
        }
 
        String Device_Num = entity.getDevice_Num();
        if (Device_Num != null) {
            stmt.bindString(11, Device_Num);
        }
 
        String Contract_Num = entity.getContract_Num();
        if (Contract_Num != null) {
            stmt.bindString(12, Contract_Num);
        }
 
        String Specification = entity.getSpecification();
        if (Specification != null) {
            stmt.bindString(13, Specification);
        }
 
        String Delivery_Date = entity.getDelivery_Date();
        if (Delivery_Date != null) {
            stmt.bindString(14, Delivery_Date);
        }
 
        String Manufacturer = entity.getManufacturer();
        if (Manufacturer != null) {
            stmt.bindString(15, Manufacturer);
        }
 
        String Program_Name = entity.getProgram_Name();
        if (Program_Name != null) {
            stmt.bindString(16, Program_Name);
        }
 
        String User_Company = entity.getUser_Company();
        if (User_Company != null) {
            stmt.bindString(17, User_Company);
        }
 
        String LoginCode = entity.getLoginCode();
        if (LoginCode != null) {
            stmt.bindString(18, LoginCode);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(19, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(20, Latitude);
        }
 
        String LastMaintainTime = entity.getLastMaintainTime();
        if (LastMaintainTime != null) {
            stmt.bindString(21, LastMaintainTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityDevice readEntity(Cursor cursor, int offset) {
        EntityDevice entity = new EntityDevice( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Lift_Address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Lift_Type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Lift_Style
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Company_Name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Company_Address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Village_Address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Village_Name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Village_Group_Num
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Village_Stage_Num
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Device_Num
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Contract_Num
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Specification
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Delivery_Date
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Manufacturer
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Program_Name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // User_Company
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // LoginCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Longitude
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Latitude
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // LastMaintainTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityDevice entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLift_Address(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLift_Type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLift_Style(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompany_Name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompany_Address(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVillage_Address(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVillage_Name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVillage_Group_Num(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVillage_Stage_Num(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDevice_Num(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContract_Num(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpecification(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDelivery_Date(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setManufacturer(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProgram_Name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUser_Company(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLoginCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLongitude(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLatitude(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLastMaintainTime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityDevice entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityDevice entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
