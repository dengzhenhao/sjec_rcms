package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityBigCustomer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_BIG_CUSTOMER.
*/
public class EntityBigCustomerDao extends AbstractDao<EntityBigCustomer, Void> {

    public static final String TABLENAME = "ENTITY_BIG_CUSTOMER";

    /**
     * Properties of entity EntityBigCustomer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property LsNo = new Property(1, String.class, "LsNo", false, "LS_NO");
        public final static Property BitCustomerName = new Property(2, String.class, "BitCustomerName", false, "BIT_CUSTOMER_NAME");
        public final static Property COOP_Status = new Property(3, Integer.class, "COOP_Status", false, "COOP__STATUS");
        public final static Property Remark = new Property(4, String.class, "Remark", false, "REMARK");
    };


    public EntityBigCustomerDao(DaoConfig config) {
        super(config);
    }
    
    public EntityBigCustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_BIG_CUSTOMER' (" + //
                "'ID' INTEGER," + // 0: ID
                "'LS_NO' TEXT," + // 1: LsNo
                "'BIT_CUSTOMER_NAME' TEXT," + // 2: BitCustomerName
                "'COOP__STATUS' INTEGER," + // 3: COOP_Status
                "'REMARK' TEXT);"); // 4: Remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_BIG_CUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityBigCustomer entity) {
        stmt.clearBindings();
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String LsNo = entity.getLsNo();
        if (LsNo != null) {
            stmt.bindString(2, LsNo);
        }
 
        String BitCustomerName = entity.getBitCustomerName();
        if (BitCustomerName != null) {
            stmt.bindString(3, BitCustomerName);
        }
 
        Integer COOP_Status = entity.getCOOP_Status();
        if (COOP_Status != null) {
            stmt.bindLong(4, COOP_Status);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(5, Remark);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityBigCustomer readEntity(Cursor cursor, int offset) {
        EntityBigCustomer entity = new EntityBigCustomer( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LsNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BitCustomerName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // COOP_Status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Remark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityBigCustomer entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setLsNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBitCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCOOP_Status(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityBigCustomer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityBigCustomer entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
