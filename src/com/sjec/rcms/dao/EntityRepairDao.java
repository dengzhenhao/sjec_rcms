package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityRepair;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_REPAIR.
*/
public class EntityRepairDao extends AbstractDao<EntityRepair, Void> {

    public static final String TABLENAME = "ENTITY_REPAIR";

    /**
     * Properties of entity EntityRepair.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property Company_Num = new Property(1, String.class, "Company_Num", false, "COMPANY__NUM");
        public final static Property Device_Num = new Property(2, String.class, "Device_Num", false, "DEVICE__NUM");
        public final static Property Error_Info = new Property(3, String.class, "Error_Info", false, "ERROR__INFO");
        public final static Property Error_Detail = new Property(4, String.class, "Error_Detail", false, "ERROR__DETAIL");
        public final static Property Status = new Property(5, Integer.class, "Status", false, "STATUS");
        public final static Property StartFlag = new Property(6, Integer.class, "StartFlag", false, "START_FLAG");
        public final static Property StartTime = new Property(7, String.class, "StartTime", false, "START_TIME");
        public final static Property EndFlag = new Property(8, Integer.class, "EndFlag", false, "END_FLAG");
        public final static Property EndTime = new Property(9, String.class, "EndTime", false, "END_TIME");
        public final static Property StartLongitude = new Property(10, String.class, "StartLongitude", false, "START_LONGITUDE");
        public final static Property StartLatitude = new Property(11, String.class, "StartLatitude", false, "START_LATITUDE");
        public final static Property EndLongitude	 = new Property(12, String.class, "EndLongitude	", false, "END_LONGITUDE	");
        public final static Property EndLatitude = new Property(13, String.class, "EndLatitude", false, "END_LATITUDE");
        public final static Property RepairDesc = new Property(14, String.class, "RepairDesc", false, "REPAIR_DESC");
        public final static Property LeaderRemark = new Property(15, String.class, "LeaderRemark", false, "LEADER_REMARK");
        public final static Property Validate = new Property(16, String.class, "Validate", false, "VALIDATE");
        public final static Property Add_UserID = new Property(17, String.class, "Add_UserID", false, "ADD__USER_ID");
        public final static Property Add_Time = new Property(18, String.class, "Add_Time", false, "ADD__TIME");
        public final static Property Add_IP = new Property(19, String.class, "Add_IP", false, "ADD__IP");
        public final static Property Update_UserID = new Property(20, String.class, "Update_UserID", false, "UPDATE__USER_ID");
        public final static Property Update_Time = new Property(21, String.class, "Update_Time", false, "UPDATE__TIME");
        public final static Property Update_IP	 = new Property(22, String.class, "Update_IP	", false, "UPDATE__IP	");
        public final static Property ChargeUserID = new Property(23, String.class, "ChargeUserID", false, "CHARGE_USER_ID");
    };


    public EntityRepairDao(DaoConfig config) {
        super(config);
    }
    
    public EntityRepairDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_REPAIR' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'COMPANY__NUM' TEXT," + // 1: Company_Num
                "'DEVICE__NUM' TEXT," + // 2: Device_Num
                "'ERROR__INFO' TEXT," + // 3: Error_Info
                "'ERROR__DETAIL' TEXT," + // 4: Error_Detail
                "'STATUS' INTEGER," + // 5: Status
                "'START_FLAG' INTEGER," + // 6: StartFlag
                "'START_TIME' TEXT," + // 7: StartTime
                "'END_FLAG' INTEGER," + // 8: EndFlag
                "'END_TIME' TEXT," + // 9: EndTime
                "'START_LONGITUDE' TEXT," + // 10: StartLongitude
                "'START_LATITUDE' TEXT," + // 11: StartLatitude
                "'END_LONGITUDE	' TEXT," + // 12: EndLongitude	
                "'END_LATITUDE' TEXT," + // 13: EndLatitude
                "'REPAIR_DESC' TEXT," + // 14: RepairDesc
                "'LEADER_REMARK' TEXT," + // 15: LeaderRemark
                "'VALIDATE' TEXT," + // 16: Validate
                "'ADD__USER_ID' TEXT," + // 17: Add_UserID
                "'ADD__TIME' TEXT," + // 18: Add_Time
                "'ADD__IP' TEXT," + // 19: Add_IP
                "'UPDATE__USER_ID' TEXT," + // 20: Update_UserID
                "'UPDATE__TIME' TEXT," + // 21: Update_Time
                "'UPDATE__IP	' TEXT," + // 22: Update_IP	
                "'CHARGE_USER_ID' TEXT);"); // 23: ChargeUserID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_REPAIR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityRepair entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String Company_Num = entity.getCompany_Num();
        if (Company_Num != null) {
            stmt.bindString(2, Company_Num);
        }
 
        String Device_Num = entity.getDevice_Num();
        if (Device_Num != null) {
            stmt.bindString(3, Device_Num);
        }
 
        String Error_Info = entity.getError_Info();
        if (Error_Info != null) {
            stmt.bindString(4, Error_Info);
        }
 
        String Error_Detail = entity.getError_Detail();
        if (Error_Detail != null) {
            stmt.bindString(5, Error_Detail);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(6, Status);
        }
 
        Integer StartFlag = entity.getStartFlag();
        if (StartFlag != null) {
            stmt.bindLong(7, StartFlag);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(8, StartTime);
        }
 
        Integer EndFlag = entity.getEndFlag();
        if (EndFlag != null) {
            stmt.bindLong(9, EndFlag);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(10, EndTime);
        }
 
        String StartLongitude = entity.getStartLongitude();
        if (StartLongitude != null) {
            stmt.bindString(11, StartLongitude);
        }
 
        String StartLatitude = entity.getStartLatitude();
        if (StartLatitude != null) {
            stmt.bindString(12, StartLatitude);
        }
 
        String EndLongitude	 = entity.getEndLongitude	();
        if (EndLongitude	 != null) {
            stmt.bindString(13, EndLongitude	);
        }
 
        String EndLatitude = entity.getEndLatitude();
        if (EndLatitude != null) {
            stmt.bindString(14, EndLatitude);
        }
 
        String RepairDesc = entity.getRepairDesc();
        if (RepairDesc != null) {
            stmt.bindString(15, RepairDesc);
        }
 
        String LeaderRemark = entity.getLeaderRemark();
        if (LeaderRemark != null) {
            stmt.bindString(16, LeaderRemark);
        }
 
        String Validate = entity.getValidate();
        if (Validate != null) {
            stmt.bindString(17, Validate);
        }
 
        String Add_UserID = entity.getAdd_UserID();
        if (Add_UserID != null) {
            stmt.bindString(18, Add_UserID);
        }
 
        String Add_Time = entity.getAdd_Time();
        if (Add_Time != null) {
            stmt.bindString(19, Add_Time);
        }
 
        String Add_IP = entity.getAdd_IP();
        if (Add_IP != null) {
            stmt.bindString(20, Add_IP);
        }
 
        String Update_UserID = entity.getUpdate_UserID();
        if (Update_UserID != null) {
            stmt.bindString(21, Update_UserID);
        }
 
        String Update_Time = entity.getUpdate_Time();
        if (Update_Time != null) {
            stmt.bindString(22, Update_Time);
        }
 
        String Update_IP	 = entity.getUpdate_IP	();
        if (Update_IP	 != null) {
            stmt.bindString(23, Update_IP	);
        }
 
        String ChargeUserID = entity.getChargeUserID();
        if (ChargeUserID != null) {
            stmt.bindString(24, ChargeUserID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityRepair readEntity(Cursor cursor, int offset) {
        EntityRepair entity = new EntityRepair( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Company_Num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Device_Num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Error_Info
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Error_Detail
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Status
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // StartFlag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // StartTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // EndFlag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // EndTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // StartLongitude
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // StartLatitude
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // EndLongitude	
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // EndLatitude
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // RepairDesc
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // LeaderRemark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Validate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // Add_UserID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Add_Time
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Add_IP
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Update_UserID
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Update_Time
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Update_IP	
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // ChargeUserID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityRepair entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompany_Num(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevice_Num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setError_Info(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setError_Detail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStartFlag(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndFlag(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEndTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartLongitude(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStartLatitude(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEndLongitude	(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEndLatitude(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRepairDesc(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLeaderRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setValidate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAdd_UserID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAdd_Time(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAdd_IP(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdate_UserID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUpdate_Time(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUpdate_IP	(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setChargeUserID(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityRepair entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityRepair entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
