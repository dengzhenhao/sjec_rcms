package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntitySparePartApply;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_SPARE_PART_APPLY.
*/
public class EntitySparePartApplyDao extends AbstractDao<EntitySparePartApply, Void> {

    public static final String TABLENAME = "ENTITY_SPARE_PART_APPLY";

    /**
     * Properties of entity EntitySparePartApply.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property ApplyStatus = new Property(1, String.class, "ApplyStatus", false, "APPLY_STATUS");
        public final static Property QuotationID = new Property(2, String.class, "QuotationID", false, "QUOTATION_ID");
        public final static Property ApplyCompanyCode = new Property(3, String.class, "ApplyCompanyCode", false, "APPLY_COMPANY_CODE");
        public final static Property ApplyCompanyID = new Property(4, String.class, "ApplyCompanyID", false, "APPLY_COMPANY_ID");
        public final static Property ApplyCompanyName = new Property(5, String.class, "ApplyCompanyName", false, "APPLY_COMPANY_NAME");
        public final static Property ApplyContent = new Property(6, String.class, "ApplyContent", false, "APPLY_CONTENT");
        public final static Property ApplyUserID = new Property(7, String.class, "ApplyUserID", false, "APPLY_USER_ID");
        public final static Property ApplyUserName = new Property(8, String.class, "ApplyUserName", false, "APPLY_USER_NAME");
        public final static Property ApplyUserStaffNo = new Property(9, String.class, "ApplyUserStaffNo", false, "APPLY_USER_STAFF_NO");
        public final static Property Telephone = new Property(10, String.class, "Telephone", false, "TELEPHONE");
        public final static Property ApplyTime = new Property(11, String.class, "ApplyTime", false, "APPLY_TIME");
        public final static Property ProgramName = new Property(12, String.class, "ProgramName", false, "PROGRAM_NAME");
        public final static Property WorkorderID = new Property(13, String.class, "WorkorderID", false, "WORKORDER_ID");
        public final static Property DeviceCode = new Property(14, String.class, "DeviceCode", false, "DEVICE_CODE");
        public final static Property Creator = new Property(15, String.class, "Creator", false, "CREATOR");
        public final static Property CreateTime = new Property(16, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property CreateIP = new Property(17, String.class, "CreateIP", false, "CREATE_IP");
        public final static Property Updater = new Property(18, String.class, "Updater", false, "UPDATER");
        public final static Property UpdateTime = new Property(19, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property UpdateIP = new Property(20, String.class, "UpdateIP", false, "UPDATE_IP");
        public final static Property BigCustomerID = new Property(21, String.class, "BigCustomerID", false, "BIG_CUSTOMER_ID");
        public final static Property BigCustomerName = new Property(22, String.class, "BigCustomerName", false, "BIG_CUSTOMER_NAME");
        public final static Property HandlerUser = new Property(23, String.class, "HandlerUser", false, "HANDLER_USER");
        public final static Property HandlerTime = new Property(24, String.class, "HandlerTime", false, "HANDLER_TIME");
        public final static Property HandlerTelephone = new Property(25, String.class, "HandlerTelephone", false, "HANDLER_TELEPHONE");
    };


    public EntitySparePartApplyDao(DaoConfig config) {
        super(config);
    }
    
    public EntitySparePartApplyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_SPARE_PART_APPLY' (" + //
                "'ID' INTEGER," + // 0: ID
                "'APPLY_STATUS' TEXT," + // 1: ApplyStatus
                "'QUOTATION_ID' TEXT," + // 2: QuotationID
                "'APPLY_COMPANY_CODE' TEXT," + // 3: ApplyCompanyCode
                "'APPLY_COMPANY_ID' TEXT," + // 4: ApplyCompanyID
                "'APPLY_COMPANY_NAME' TEXT," + // 5: ApplyCompanyName
                "'APPLY_CONTENT' TEXT," + // 6: ApplyContent
                "'APPLY_USER_ID' TEXT," + // 7: ApplyUserID
                "'APPLY_USER_NAME' TEXT," + // 8: ApplyUserName
                "'APPLY_USER_STAFF_NO' TEXT," + // 9: ApplyUserStaffNo
                "'TELEPHONE' TEXT," + // 10: Telephone
                "'APPLY_TIME' TEXT," + // 11: ApplyTime
                "'PROGRAM_NAME' TEXT," + // 12: ProgramName
                "'WORKORDER_ID' TEXT," + // 13: WorkorderID
                "'DEVICE_CODE' TEXT," + // 14: DeviceCode
                "'CREATOR' TEXT," + // 15: Creator
                "'CREATE_TIME' TEXT," + // 16: CreateTime
                "'CREATE_IP' TEXT," + // 17: CreateIP
                "'UPDATER' TEXT," + // 18: Updater
                "'UPDATE_TIME' TEXT," + // 19: UpdateTime
                "'UPDATE_IP' TEXT," + // 20: UpdateIP
                "'BIG_CUSTOMER_ID' TEXT," + // 21: BigCustomerID
                "'BIG_CUSTOMER_NAME' TEXT," + // 22: BigCustomerName
                "'HANDLER_USER' TEXT," + // 23: HandlerUser
                "'HANDLER_TIME' TEXT," + // 24: HandlerTime
                "'HANDLER_TELEPHONE' TEXT);"); // 25: HandlerTelephone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_SPARE_PART_APPLY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntitySparePartApply entity) {
        stmt.clearBindings();
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String ApplyStatus = entity.getApplyStatus();
        if (ApplyStatus != null) {
            stmt.bindString(2, ApplyStatus);
        }
 
        String QuotationID = entity.getQuotationID();
        if (QuotationID != null) {
            stmt.bindString(3, QuotationID);
        }
 
        String ApplyCompanyCode = entity.getApplyCompanyCode();
        if (ApplyCompanyCode != null) {
            stmt.bindString(4, ApplyCompanyCode);
        }
 
        String ApplyCompanyID = entity.getApplyCompanyID();
        if (ApplyCompanyID != null) {
            stmt.bindString(5, ApplyCompanyID);
        }
 
        String ApplyCompanyName = entity.getApplyCompanyName();
        if (ApplyCompanyName != null) {
            stmt.bindString(6, ApplyCompanyName);
        }
 
        String ApplyContent = entity.getApplyContent();
        if (ApplyContent != null) {
            stmt.bindString(7, ApplyContent);
        }
 
        String ApplyUserID = entity.getApplyUserID();
        if (ApplyUserID != null) {
            stmt.bindString(8, ApplyUserID);
        }
 
        String ApplyUserName = entity.getApplyUserName();
        if (ApplyUserName != null) {
            stmt.bindString(9, ApplyUserName);
        }
 
        String ApplyUserStaffNo = entity.getApplyUserStaffNo();
        if (ApplyUserStaffNo != null) {
            stmt.bindString(10, ApplyUserStaffNo);
        }
 
        String Telephone = entity.getTelephone();
        if (Telephone != null) {
            stmt.bindString(11, Telephone);
        }
 
        String ApplyTime = entity.getApplyTime();
        if (ApplyTime != null) {
            stmt.bindString(12, ApplyTime);
        }
 
        String ProgramName = entity.getProgramName();
        if (ProgramName != null) {
            stmt.bindString(13, ProgramName);
        }
 
        String WorkorderID = entity.getWorkorderID();
        if (WorkorderID != null) {
            stmt.bindString(14, WorkorderID);
        }
 
        String DeviceCode = entity.getDeviceCode();
        if (DeviceCode != null) {
            stmt.bindString(15, DeviceCode);
        }
 
        String Creator = entity.getCreator();
        if (Creator != null) {
            stmt.bindString(16, Creator);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(17, CreateTime);
        }
 
        String CreateIP = entity.getCreateIP();
        if (CreateIP != null) {
            stmt.bindString(18, CreateIP);
        }
 
        String Updater = entity.getUpdater();
        if (Updater != null) {
            stmt.bindString(19, Updater);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(20, UpdateTime);
        }
 
        String UpdateIP = entity.getUpdateIP();
        if (UpdateIP != null) {
            stmt.bindString(21, UpdateIP);
        }
 
        String BigCustomerID = entity.getBigCustomerID();
        if (BigCustomerID != null) {
            stmt.bindString(22, BigCustomerID);
        }
 
        String BigCustomerName = entity.getBigCustomerName();
        if (BigCustomerName != null) {
            stmt.bindString(23, BigCustomerName);
        }
 
        String HandlerUser = entity.getHandlerUser();
        if (HandlerUser != null) {
            stmt.bindString(24, HandlerUser);
        }
 
        String HandlerTime = entity.getHandlerTime();
        if (HandlerTime != null) {
            stmt.bindString(25, HandlerTime);
        }
 
        String HandlerTelephone = entity.getHandlerTelephone();
        if (HandlerTelephone != null) {
            stmt.bindString(26, HandlerTelephone);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntitySparePartApply readEntity(Cursor cursor, int offset) {
        EntitySparePartApply entity = new EntitySparePartApply( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ApplyStatus
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // QuotationID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ApplyCompanyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ApplyCompanyID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ApplyCompanyName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ApplyContent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ApplyUserID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ApplyUserName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ApplyUserStaffNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Telephone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ApplyTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ProgramName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // WorkorderID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // DeviceCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Creator
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CreateTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CreateIP
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Updater
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // UpdateTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // UpdateIP
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // BigCustomerID
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // BigCustomerName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // HandlerUser
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // HandlerTime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // HandlerTelephone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntitySparePartApply entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setApplyStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuotationID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApplyCompanyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApplyCompanyID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApplyCompanyName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setApplyContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setApplyUserID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setApplyUserName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setApplyUserStaffNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTelephone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setApplyTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProgramName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWorkorderID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeviceCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreator(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreateTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreateIP(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpdater(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUpdateTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdateIP(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBigCustomerID(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBigCustomerName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHandlerUser(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHandlerTime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setHandlerTelephone(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntitySparePartApply entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntitySparePartApply entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
