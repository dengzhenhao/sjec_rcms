package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityQuotationStatusLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_QUOTATION_STATUS_LOG.
*/
public class EntityQuotationStatusLogDao extends AbstractDao<EntityQuotationStatusLog, Void> {

    public static final String TABLENAME = "ENTITY_QUOTATION_STATUS_LOG";

    /**
     * Properties of entity EntityQuotationStatusLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property SourceStatus = new Property(1, Integer.class, "SourceStatus", false, "SOURCE_STATUS");
        public final static Property TargetStatus = new Property(2, Integer.class, "TargetStatus", false, "TARGET_STATUS");
        public final static Property QuotationID = new Property(3, Integer.class, "QuotationID", false, "QUOTATION_ID");
        public final static Property CreateTime = new Property(4, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property Creator = new Property(5, String.class, "Creator", false, "CREATOR");
        public final static Property CreateIP = new Property(6, String.class, "CreateIP", false, "CREATE_IP");
        public final static Property UpdateTime = new Property(7, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Updater = new Property(8, String.class, "Updater", false, "UPDATER");
        public final static Property UpdateIP = new Property(9, String.class, "UpdateIP", false, "UPDATE_IP");
    };


    public EntityQuotationStatusLogDao(DaoConfig config) {
        super(config);
    }
    
    public EntityQuotationStatusLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_QUOTATION_STATUS_LOG' (" + //
                "'ID' INTEGER," + // 0: ID
                "'SOURCE_STATUS' INTEGER," + // 1: SourceStatus
                "'TARGET_STATUS' INTEGER," + // 2: TargetStatus
                "'QUOTATION_ID' INTEGER," + // 3: QuotationID
                "'CREATE_TIME' TEXT," + // 4: CreateTime
                "'CREATOR' TEXT," + // 5: Creator
                "'CREATE_IP' TEXT," + // 6: CreateIP
                "'UPDATE_TIME' TEXT," + // 7: UpdateTime
                "'UPDATER' TEXT," + // 8: Updater
                "'UPDATE_IP' TEXT);"); // 9: UpdateIP
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_QUOTATION_STATUS_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityQuotationStatusLog entity) {
        stmt.clearBindings();
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Integer SourceStatus = entity.getSourceStatus();
        if (SourceStatus != null) {
            stmt.bindLong(2, SourceStatus);
        }
 
        Integer TargetStatus = entity.getTargetStatus();
        if (TargetStatus != null) {
            stmt.bindLong(3, TargetStatus);
        }
 
        Integer QuotationID = entity.getQuotationID();
        if (QuotationID != null) {
            stmt.bindLong(4, QuotationID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(5, CreateTime);
        }
 
        String Creator = entity.getCreator();
        if (Creator != null) {
            stmt.bindString(6, Creator);
        }
 
        String CreateIP = entity.getCreateIP();
        if (CreateIP != null) {
            stmt.bindString(7, CreateIP);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(8, UpdateTime);
        }
 
        String Updater = entity.getUpdater();
        if (Updater != null) {
            stmt.bindString(9, Updater);
        }
 
        String UpdateIP = entity.getUpdateIP();
        if (UpdateIP != null) {
            stmt.bindString(10, UpdateIP);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityQuotationStatusLog readEntity(Cursor cursor, int offset) {
        EntityQuotationStatusLog entity = new EntityQuotationStatusLog( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // SourceStatus
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // TargetStatus
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // QuotationID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CreateTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Creator
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreateIP
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UpdateTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Updater
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // UpdateIP
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityQuotationStatusLog entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setSourceStatus(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTargetStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setQuotationID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreator(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateIP(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdater(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateIP(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityQuotationStatusLog entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityQuotationStatusLog entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
