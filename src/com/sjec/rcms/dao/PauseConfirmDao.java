package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.PauseConfirm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PAUSE_CONFIRM.
*/
public class PauseConfirmDao extends AbstractDao<PauseConfirm, Void> {

    public static final String TABLENAME = "PAUSE_CONFIRM";

    /**
     * Properties of entity PauseConfirm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property WorkorderID = new Property(1, String.class, "WorkorderID", false, "WORKORDER_ID");
        public final static Property OccurTime = new Property(2, String.class, "OccurTime", false, "OCCUR_TIME");
        public final static Property UserID = new Property(3, String.class, "UserID", false, "USER_ID");
        public final static Property FromPauseStatus = new Property(4, Integer.class, "FromPauseStatus", false, "FROM_PAUSE_STATUS");
        public final static Property TargetPauseStatus = new Property(5, Integer.class, "TargetPauseStatus", false, "TARGET_PAUSE_STATUS");
        public final static Property AdminCheck = new Property(6, Integer.class, "AdminCheck", false, "ADMIN_CHECK");
        public final static Property CheckTime = new Property(7, String.class, "CheckTime", false, "CHECK_TIME");
        public final static Property Remark = new Property(8, String.class, "Remark", false, "REMARK");
        public final static Property Device_Num = new Property(9, String.class, "Device_Num", false, "DEVICE__NUM");
        public final static Property ChargeUserName = new Property(10, String.class, "ChargeUserName", false, "CHARGE_USER_NAME");
        public final static Property StartTime = new Property(11, String.class, "StartTime", false, "START_TIME");
    };


    public PauseConfirmDao(DaoConfig config) {
        super(config);
    }
    
    public PauseConfirmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PAUSE_CONFIRM' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'WORKORDER_ID' TEXT," + // 1: WorkorderID
                "'OCCUR_TIME' TEXT," + // 2: OccurTime
                "'USER_ID' TEXT," + // 3: UserID
                "'FROM_PAUSE_STATUS' INTEGER," + // 4: FromPauseStatus
                "'TARGET_PAUSE_STATUS' INTEGER," + // 5: TargetPauseStatus
                "'ADMIN_CHECK' INTEGER," + // 6: AdminCheck
                "'CHECK_TIME' TEXT," + // 7: CheckTime
                "'REMARK' TEXT," + // 8: Remark
                "'DEVICE__NUM' TEXT," + // 9: Device_Num
                "'CHARGE_USER_NAME' TEXT," + // 10: ChargeUserName
                "'START_TIME' TEXT);"); // 11: StartTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PAUSE_CONFIRM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PauseConfirm entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String WorkorderID = entity.getWorkorderID();
        if (WorkorderID != null) {
            stmt.bindString(2, WorkorderID);
        }
 
        String OccurTime = entity.getOccurTime();
        if (OccurTime != null) {
            stmt.bindString(3, OccurTime);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(4, UserID);
        }
 
        Integer FromPauseStatus = entity.getFromPauseStatus();
        if (FromPauseStatus != null) {
            stmt.bindLong(5, FromPauseStatus);
        }
 
        Integer TargetPauseStatus = entity.getTargetPauseStatus();
        if (TargetPauseStatus != null) {
            stmt.bindLong(6, TargetPauseStatus);
        }
 
        Integer AdminCheck = entity.getAdminCheck();
        if (AdminCheck != null) {
            stmt.bindLong(7, AdminCheck);
        }
 
        String CheckTime = entity.getCheckTime();
        if (CheckTime != null) {
            stmt.bindString(8, CheckTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(9, Remark);
        }
 
        String Device_Num = entity.getDevice_Num();
        if (Device_Num != null) {
            stmt.bindString(10, Device_Num);
        }
 
        String ChargeUserName = entity.getChargeUserName();
        if (ChargeUserName != null) {
            stmt.bindString(11, ChargeUserName);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(12, StartTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PauseConfirm readEntity(Cursor cursor, int offset) {
        PauseConfirm entity = new PauseConfirm( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // WorkorderID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OccurTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // FromPauseStatus
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // TargetPauseStatus
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // AdminCheck
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CheckTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Remark
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Device_Num
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ChargeUserName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // StartTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PauseConfirm entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWorkorderID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOccurTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromPauseStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTargetPauseStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAdminCheck(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCheckTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDevice_Num(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChargeUserName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStartTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PauseConfirm entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PauseConfirm entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
