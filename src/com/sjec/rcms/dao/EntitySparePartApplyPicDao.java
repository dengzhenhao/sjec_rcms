package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntitySparePartApplyPic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_SPARE_PART_APPLY_PIC.
*/
public class EntitySparePartApplyPicDao extends AbstractDao<EntitySparePartApplyPic, Void> {

    public static final String TABLENAME = "ENTITY_SPARE_PART_APPLY_PIC";

    /**
     * Properties of entity EntitySparePartApplyPic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property PicPath = new Property(1, String.class, "PicPath", false, "PIC_PATH");
        public final static Property App_Quotation_Data_ID = new Property(2, String.class, "App_Quotation_Data_ID", false, "APP__QUOTATION__DATA__ID");
        public final static Property CreateTime = new Property(3, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property Creator = new Property(4, String.class, "Creator", false, "CREATOR");
        public final static Property CreateIP = new Property(5, String.class, "CreateIP", false, "CREATE_IP");
        public final static Property UpdateTime = new Property(6, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Updater = new Property(7, String.class, "Updater", false, "UPDATER");
        public final static Property UpdateIP = new Property(8, String.class, "UpdateIP", false, "UPDATE_IP");
    };


    public EntitySparePartApplyPicDao(DaoConfig config) {
        super(config);
    }
    
    public EntitySparePartApplyPicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_SPARE_PART_APPLY_PIC' (" + //
                "'ID' INTEGER," + // 0: ID
                "'PIC_PATH' TEXT," + // 1: PicPath
                "'APP__QUOTATION__DATA__ID' TEXT," + // 2: App_Quotation_Data_ID
                "'CREATE_TIME' TEXT," + // 3: CreateTime
                "'CREATOR' TEXT," + // 4: Creator
                "'CREATE_IP' TEXT," + // 5: CreateIP
                "'UPDATE_TIME' TEXT," + // 6: UpdateTime
                "'UPDATER' TEXT," + // 7: Updater
                "'UPDATE_IP' TEXT);"); // 8: UpdateIP
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_SPARE_PART_APPLY_PIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntitySparePartApplyPic entity) {
        stmt.clearBindings();
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String PicPath = entity.getPicPath();
        if (PicPath != null) {
            stmt.bindString(2, PicPath);
        }
 
        String App_Quotation_Data_ID = entity.getApp_Quotation_Data_ID();
        if (App_Quotation_Data_ID != null) {
            stmt.bindString(3, App_Quotation_Data_ID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(4, CreateTime);
        }
 
        String Creator = entity.getCreator();
        if (Creator != null) {
            stmt.bindString(5, Creator);
        }
 
        String CreateIP = entity.getCreateIP();
        if (CreateIP != null) {
            stmt.bindString(6, CreateIP);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(7, UpdateTime);
        }
 
        String Updater = entity.getUpdater();
        if (Updater != null) {
            stmt.bindString(8, Updater);
        }
 
        String UpdateIP = entity.getUpdateIP();
        if (UpdateIP != null) {
            stmt.bindString(9, UpdateIP);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntitySparePartApplyPic readEntity(Cursor cursor, int offset) {
        EntitySparePartApplyPic entity = new EntitySparePartApplyPic( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PicPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // App_Quotation_Data_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CreateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Creator
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CreateIP
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UpdateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Updater
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // UpdateIP
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntitySparePartApplyPic entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setPicPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApp_Quotation_Data_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreator(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateIP(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdater(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateIP(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntitySparePartApplyPic entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntitySparePartApplyPic entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
