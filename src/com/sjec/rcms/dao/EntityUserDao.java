package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_USER.
*/
public class EntityUserDao extends AbstractDao<EntityUser, Void> {

    public static final String TABLENAME = "ENTITY_USER";

    /**
     * Properties of entity EntityUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property UserID = new Property(1, String.class, "UserID", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "UserName", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "Password", false, "PASSWORD");
        public final static Property Telephone = new Property(4, String.class, "Telephone", false, "TELEPHONE");
        public final static Property Email = new Property(5, String.class, "Email", false, "EMAIL");
        public final static Property Description = new Property(6, String.class, "Description", false, "DESCRIPTION");
        public final static Property NavigationUrl = new Property(7, String.class, "NavigationUrl", false, "NAVIGATION_URL");
        public final static Property CityID = new Property(8, String.class, "CityID", false, "CITY_ID");
    };


    public EntityUserDao(DaoConfig config) {
        super(config);
    }
    
    public EntityUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_USER' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'USER_ID' TEXT," + // 1: UserID
                "'USER_NAME' TEXT," + // 2: UserName
                "'PASSWORD' TEXT," + // 3: Password
                "'TELEPHONE' TEXT," + // 4: Telephone
                "'EMAIL' TEXT," + // 5: Email
                "'DESCRIPTION' TEXT," + // 6: Description
                "'NAVIGATION_URL' TEXT," + // 7: NavigationUrl
                "'CITY_ID' TEXT);"); // 8: CityID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityUser entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(2, UserID);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(4, Password);
        }
 
        String Telephone = entity.getTelephone();
        if (Telephone != null) {
            stmt.bindString(5, Telephone);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(6, Email);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(7, Description);
        }
 
        String NavigationUrl = entity.getNavigationUrl();
        if (NavigationUrl != null) {
            stmt.bindString(8, NavigationUrl);
        }
 
        String CityID = entity.getCityID();
        if (CityID != null) {
            stmt.bindString(9, CityID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityUser readEntity(Cursor cursor, int offset) {
        EntityUser entity = new EntityUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Telephone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NavigationUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // CityID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityUser entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelephone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNavigationUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCityID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityUser entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
