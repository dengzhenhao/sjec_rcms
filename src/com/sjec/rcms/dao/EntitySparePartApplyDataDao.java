package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntitySparePartApplyData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_SPARE_PART_APPLY_DATA.
*/
public class EntitySparePartApplyDataDao extends AbstractDao<EntitySparePartApplyData, Void> {

    public static final String TABLENAME = "ENTITY_SPARE_PART_APPLY_DATA";

    /**
     * Properties of entity EntitySparePartApplyData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property App_Quotation_ID = new Property(0, String.class, "App_Quotation_ID", false, "APP__QUOTATION__ID");
        public final static Property Part_Name = new Property(1, String.class, "Part_Name", false, "PART__NAME");
        public final static Property Draw_Code = new Property(2, String.class, "Draw_Code", false, "DRAW__CODE");
        public final static Property Code = new Property(3, String.class, "Code", false, "CODE");
        public final static Property Quantity = new Property(4, String.class, "Quantity", false, "QUANTITY");
        public final static Property Description = new Property(5, String.class, "Description", false, "DESCRIPTION");
        public final static Property CreateTime = new Property(6, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property Creator = new Property(7, String.class, "Creator", false, "CREATOR");
        public final static Property CreateIP = new Property(8, String.class, "CreateIP", false, "CREATE_IP");
        public final static Property UpdateTime = new Property(9, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Updater = new Property(10, String.class, "Updater", false, "UPDATER");
        public final static Property UpdateIP = new Property(11, String.class, "UpdateIP", false, "UPDATE_IP");
        public final static Property ID = new Property(12, Integer.class, "ID", false, "ID");
    };


    public EntitySparePartApplyDataDao(DaoConfig config) {
        super(config);
    }
    
    public EntitySparePartApplyDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_SPARE_PART_APPLY_DATA' (" + //
                "'APP__QUOTATION__ID' TEXT," + // 0: App_Quotation_ID
                "'PART__NAME' TEXT," + // 1: Part_Name
                "'DRAW__CODE' TEXT," + // 2: Draw_Code
                "'CODE' TEXT," + // 3: Code
                "'QUANTITY' TEXT," + // 4: Quantity
                "'DESCRIPTION' TEXT," + // 5: Description
                "'CREATE_TIME' TEXT," + // 6: CreateTime
                "'CREATOR' TEXT," + // 7: Creator
                "'CREATE_IP' TEXT," + // 8: CreateIP
                "'UPDATE_TIME' TEXT," + // 9: UpdateTime
                "'UPDATER' TEXT," + // 10: Updater
                "'UPDATE_IP' TEXT," + // 11: UpdateIP
                "'ID' INTEGER);"); // 12: ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_SPARE_PART_APPLY_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntitySparePartApplyData entity) {
        stmt.clearBindings();
 
        String App_Quotation_ID = entity.getApp_Quotation_ID();
        if (App_Quotation_ID != null) {
            stmt.bindString(1, App_Quotation_ID);
        }
 
        String Part_Name = entity.getPart_Name();
        if (Part_Name != null) {
            stmt.bindString(2, Part_Name);
        }
 
        String Draw_Code = entity.getDraw_Code();
        if (Draw_Code != null) {
            stmt.bindString(3, Draw_Code);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(4, Code);
        }
 
        String Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindString(5, Quantity);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(7, CreateTime);
        }
 
        String Creator = entity.getCreator();
        if (Creator != null) {
            stmt.bindString(8, Creator);
        }
 
        String CreateIP = entity.getCreateIP();
        if (CreateIP != null) {
            stmt.bindString(9, CreateIP);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(10, UpdateTime);
        }
 
        String Updater = entity.getUpdater();
        if (Updater != null) {
            stmt.bindString(11, Updater);
        }
 
        String UpdateIP = entity.getUpdateIP();
        if (UpdateIP != null) {
            stmt.bindString(12, UpdateIP);
        }
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(13, ID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntitySparePartApplyData readEntity(Cursor cursor, int offset) {
        EntitySparePartApplyData entity = new EntitySparePartApplyData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // App_Quotation_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Part_Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Draw_Code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Quantity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Creator
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CreateIP
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UpdateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Updater
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UpdateIP
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntitySparePartApplyData entity, int offset) {
        entity.setApp_Quotation_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPart_Name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDraw_Code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuantity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreator(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateIP(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdater(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateIP(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setID(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntitySparePartApplyData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntitySparePartApplyData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
