package com.sjec.rcms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sjec.rcms.dao.EntityWorkorder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_WORKORDER.
*/
public class EntityWorkorderDao extends AbstractDao<EntityWorkorder, Void> {

    public static final String TABLENAME = "ENTITY_WORKORDER";

    /**
     * Properties of entity EntityWorkorder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property Company_Num = new Property(1, String.class, "Company_Num", false, "COMPANY__NUM");
        public final static Property Device_Num = new Property(2, String.class, "Device_Num", false, "DEVICE__NUM");
        public final static Property EventSource = new Property(3, String.class, "EventSource", false, "EVENT_SOURCE");
        public final static Property ForeignID = new Property(4, String.class, "ForeignID", false, "FOREIGN_ID");
        public final static Property Remark = new Property(5, String.class, "Remark", false, "REMARK");
        public final static Property SolutionInfo = new Property(6, String.class, "SolutionInfo", false, "SOLUTION_INFO");
        public final static Property Status = new Property(7, Integer.class, "Status", false, "STATUS");
        public final static Property Type = new Property(8, Integer.class, "Type", false, "TYPE");
        public final static Property ControlType = new Property(9, String.class, "ControlType", false, "CONTROL_TYPE");
        public final static Property Add_Time = new Property(10, String.class, "Add_Time", false, "ADD__TIME");
        public final static Property Village_Name = new Property(11, String.class, "Village_Name", false, "VILLAGE__NAME");
        public final static Property Village_Group_Num = new Property(12, String.class, "Village_Group_Num", false, "VILLAGE__GROUP__NUM");
        public final static Property Village_Stage_Num = new Property(13, String.class, "Village_Stage_Num", false, "VILLAGE__STAGE__NUM");
        public final static Property ChargeUserID = new Property(14, String.class, "ChargeUserID", false, "CHARGE_USER_ID");
        public final static Property ChargeUserName = new Property(15, String.class, "ChargeUserName", false, "CHARGE_USER_NAME");
        public final static Property ChargeUserPhone = new Property(16, String.class, "ChargeUserPhone", false, "CHARGE_USER_PHONE");
        public final static Property StartTime = new Property(17, String.class, "StartTime", false, "START_TIME");
        public final static Property EndTime = new Property(18, String.class, "EndTime", false, "END_TIME");
        public final static Property OrderPause = new Property(19, Integer.class, "OrderPause", false, "ORDER_PAUSE");
        public final static Property ProvisionMaintainTime = new Property(20, String.class, "ProvisionMaintainTime", false, "PROVISION_MAINTAIN_TIME");
        public final static Property StartType = new Property(21, String.class, "StartType", false, "START_TYPE");
        public final static Property CompleteDate = new Property(22, String.class, "CompleteDate", false, "COMPLETE_DATE");
        public final static Property IsNeedAbarbeitung = new Property(23, String.class, "IsNeedAbarbeitung", false, "IS_NEED_ABARBEITUNG");
        public final static Property Program_Name = new Property(24, String.class, "Program_Name", false, "PROGRAM__NAME");
        public final static Property LastSeasonMaintain = new Property(25, String.class, "LastSeasonMaintain", false, "LAST_SEASON_MAINTAIN");
        public final static Property LastHalfYearMaintain = new Property(26, String.class, "LastHalfYearMaintain", false, "LAST_HALF_YEAR_MAINTAIN");
        public final static Property MaintainType = new Property(27, String.class, "MaintainType", false, "MAINTAIN_TYPE");
        public final static Property ResultDesc = new Property(28, String.class, "ResultDesc", false, "RESULT_DESC");
        public final static Property ResultType = new Property(29, String.class, "ResultType", false, "RESULT_TYPE");
    };


    public EntityWorkorderDao(DaoConfig config) {
        super(config);
    }
    
    public EntityWorkorderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_WORKORDER' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'COMPANY__NUM' TEXT," + // 1: Company_Num
                "'DEVICE__NUM' TEXT," + // 2: Device_Num
                "'EVENT_SOURCE' TEXT," + // 3: EventSource
                "'FOREIGN_ID' TEXT," + // 4: ForeignID
                "'REMARK' TEXT," + // 5: Remark
                "'SOLUTION_INFO' TEXT," + // 6: SolutionInfo
                "'STATUS' INTEGER," + // 7: Status
                "'TYPE' INTEGER," + // 8: Type
                "'CONTROL_TYPE' TEXT," + // 9: ControlType
                "'ADD__TIME' TEXT," + // 10: Add_Time
                "'VILLAGE__NAME' TEXT," + // 11: Village_Name
                "'VILLAGE__GROUP__NUM' TEXT," + // 12: Village_Group_Num
                "'VILLAGE__STAGE__NUM' TEXT," + // 13: Village_Stage_Num
                "'CHARGE_USER_ID' TEXT," + // 14: ChargeUserID
                "'CHARGE_USER_NAME' TEXT," + // 15: ChargeUserName
                "'CHARGE_USER_PHONE' TEXT," + // 16: ChargeUserPhone
                "'START_TIME' TEXT," + // 17: StartTime
                "'END_TIME' TEXT," + // 18: EndTime
                "'ORDER_PAUSE' INTEGER," + // 19: OrderPause
                "'PROVISION_MAINTAIN_TIME' TEXT," + // 20: ProvisionMaintainTime
                "'START_TYPE' TEXT," + // 21: StartType
                "'COMPLETE_DATE' TEXT," + // 22: CompleteDate
                "'IS_NEED_ABARBEITUNG' TEXT," + // 23: IsNeedAbarbeitung
                "'PROGRAM__NAME' TEXT," + // 24: Program_Name
                "'LAST_SEASON_MAINTAIN' TEXT," + // 25: LastSeasonMaintain
                "'LAST_HALF_YEAR_MAINTAIN' TEXT," + // 26: LastHalfYearMaintain
                "'MAINTAIN_TYPE' TEXT," + // 27: MaintainType
                "'RESULT_DESC' TEXT," + // 28: ResultDesc
                "'RESULT_TYPE' TEXT);"); // 29: ResultType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_WORKORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityWorkorder entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String Company_Num = entity.getCompany_Num();
        if (Company_Num != null) {
            stmt.bindString(2, Company_Num);
        }
 
        String Device_Num = entity.getDevice_Num();
        if (Device_Num != null) {
            stmt.bindString(3, Device_Num);
        }
 
        String EventSource = entity.getEventSource();
        if (EventSource != null) {
            stmt.bindString(4, EventSource);
        }
 
        String ForeignID = entity.getForeignID();
        if (ForeignID != null) {
            stmt.bindString(5, ForeignID);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(6, Remark);
        }
 
        String SolutionInfo = entity.getSolutionInfo();
        if (SolutionInfo != null) {
            stmt.bindString(7, SolutionInfo);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(8, Status);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(9, Type);
        }
 
        String ControlType = entity.getControlType();
        if (ControlType != null) {
            stmt.bindString(10, ControlType);
        }
 
        String Add_Time = entity.getAdd_Time();
        if (Add_Time != null) {
            stmt.bindString(11, Add_Time);
        }
 
        String Village_Name = entity.getVillage_Name();
        if (Village_Name != null) {
            stmt.bindString(12, Village_Name);
        }
 
        String Village_Group_Num = entity.getVillage_Group_Num();
        if (Village_Group_Num != null) {
            stmt.bindString(13, Village_Group_Num);
        }
 
        String Village_Stage_Num = entity.getVillage_Stage_Num();
        if (Village_Stage_Num != null) {
            stmt.bindString(14, Village_Stage_Num);
        }
 
        String ChargeUserID = entity.getChargeUserID();
        if (ChargeUserID != null) {
            stmt.bindString(15, ChargeUserID);
        }
 
        String ChargeUserName = entity.getChargeUserName();
        if (ChargeUserName != null) {
            stmt.bindString(16, ChargeUserName);
        }
 
        String ChargeUserPhone = entity.getChargeUserPhone();
        if (ChargeUserPhone != null) {
            stmt.bindString(17, ChargeUserPhone);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(18, StartTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(19, EndTime);
        }
 
        Integer OrderPause = entity.getOrderPause();
        if (OrderPause != null) {
            stmt.bindLong(20, OrderPause);
        }
 
        String ProvisionMaintainTime = entity.getProvisionMaintainTime();
        if (ProvisionMaintainTime != null) {
            stmt.bindString(21, ProvisionMaintainTime);
        }
 
        String StartType = entity.getStartType();
        if (StartType != null) {
            stmt.bindString(22, StartType);
        }
 
        String CompleteDate = entity.getCompleteDate();
        if (CompleteDate != null) {
            stmt.bindString(23, CompleteDate);
        }
 
        String IsNeedAbarbeitung = entity.getIsNeedAbarbeitung();
        if (IsNeedAbarbeitung != null) {
            stmt.bindString(24, IsNeedAbarbeitung);
        }
 
        String Program_Name = entity.getProgram_Name();
        if (Program_Name != null) {
            stmt.bindString(25, Program_Name);
        }
 
        String LastSeasonMaintain = entity.getLastSeasonMaintain();
        if (LastSeasonMaintain != null) {
            stmt.bindString(26, LastSeasonMaintain);
        }
 
        String LastHalfYearMaintain = entity.getLastHalfYearMaintain();
        if (LastHalfYearMaintain != null) {
            stmt.bindString(27, LastHalfYearMaintain);
        }
 
        String MaintainType = entity.getMaintainType();
        if (MaintainType != null) {
            stmt.bindString(28, MaintainType);
        }
 
        String ResultDesc = entity.getResultDesc();
        if (ResultDesc != null) {
            stmt.bindString(29, ResultDesc);
        }
 
        String ResultType = entity.getResultType();
        if (ResultType != null) {
            stmt.bindString(30, ResultType);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityWorkorder readEntity(Cursor cursor, int offset) {
        EntityWorkorder entity = new EntityWorkorder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Company_Num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Device_Num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EventSource
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ForeignID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SolutionInfo
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Status
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // Type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ControlType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Add_Time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Village_Name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Village_Group_Num
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Village_Stage_Num
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ChargeUserID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ChargeUserName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ChargeUserPhone
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // StartTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // EndTime
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // OrderPause
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ProvisionMaintainTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // StartType
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CompleteDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // IsNeedAbarbeitung
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Program_Name
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // LastSeasonMaintain
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // LastHalfYearMaintain
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // MaintainType
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // ResultDesc
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29) // ResultType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityWorkorder entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompany_Num(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevice_Num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEventSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setForeignID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSolutionInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setControlType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAdd_Time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVillage_Name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVillage_Group_Num(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVillage_Stage_Num(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setChargeUserID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setChargeUserName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setChargeUserPhone(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStartTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEndTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOrderPause(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setProvisionMaintainTime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStartType(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCompleteDate(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsNeedAbarbeitung(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setProgram_Name(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLastSeasonMaintain(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLastHalfYearMaintain(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMaintainType(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setResultDesc(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setResultType(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityWorkorder entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityWorkorder entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
